{
  "language": "Solidity",
  "sources": {
    "src/LootXP.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.8.7;\n\nabstract contract Ownable {\n    address internal _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(address firstOwner) {\n        _owner = firstOwner;\n        emit OwnershipTransferred(address(0), firstOwner);\n    }\n\n    function owner() external view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"NOT_OWNER\");\n        _;\n    }\n\n    function renounceOwnership() external onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract LootXP is Ownable {\n    event SourceSet(address indexed generator, address indexed source, bool added);\n    event SinkSet(address indexed generator, address indexed sink, bool added);\n    event GeneratorSet(address indexed generator, bool added);\n\n    event XP(uint256 indexed lootId, address indexed sourceOrSink, uint256 previousAmount, uint256 newAmount);\n\n    mapping(uint256 => uint256) public xp;\n    mapping(address => uint256) public xpGenerated;\n    mapping(address => uint256) public xpDestroyed;\n\n    mapping(address => bool) public xpSource;\n    mapping(address => bool) public xpSink;\n\n    mapping(address => bool) public generator;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address firstOwner) Ownable(firstOwner) {}\n\n    function addXP(uint256 lootId, uint256 amount) external returns (bool) {\n        // use return bool instead of throw so that caller can be sure the call will not revert and can carry on\n        if (xpSource[msg.sender]) {\n            uint256 oldXP = xp[lootId];\n            uint256 newXP;\n            unchecked {newXP = oldXP + amount;}\n            if (newXP < oldXP) {\n                newXP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n            }\n            xp[lootId] = newXP;\n            emit XP(lootId, msg.sender, oldXP, newXP);\n            amount = newXP - oldXP;\n\n            oldXP = xpGenerated[msg.sender];\n            unchecked {newXP = oldXP + amount;}\n            if (newXP < oldXP) {\n                newXP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n            }\n            xpGenerated[msg.sender] = newXP;\n\n            return true;\n        }\n        return false;\n    }\n\n    function removeXP(uint256 lootId, uint256 amount) external returns (bool) {\n        // use return bool instead of throw so that caller can be sure the call will not revert and can carry on\n        if (xpSink[msg.sender]) {\n            uint256 oldXP = xp[lootId];\n            uint256 newXP;\n            if (amount > oldXP) {\n                newXP = 0;\n            } else {\n                newXP = oldXP - amount;\n            }\n            xp[lootId] = newXP;\n            emit XP(lootId, msg.sender, oldXP, newXP);\n            amount = oldXP - newXP;\n\n            oldXP = xpDestroyed[msg.sender];\n            unchecked {newXP = oldXP + amount;}\n            if (newXP < oldXP) {\n                newXP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n            }\n            xpDestroyed[msg.sender] = newXP;\n\n            return true;\n        }\n        return false;\n    }\n\n    function setSource(address source, bool add) external {\n        require(generator[msg.sender] || msg.sender == _owner, \"NOT_ALLOWED\");\n        xpSource[source] = add;\n        emit SourceSet(msg.sender, source, add);\n    }\n\n    function setSink(address sink, bool add) external {\n        require(generator[msg.sender] || msg.sender == _owner, \"NOT_ALLOWED\");\n        xpSink[sink] = add;\n        emit SinkSet(msg.sender, sink, add);\n    }\n\n    function setGenerator(address generatorToSet, bool add) external {\n        require(msg.sender == _owner, \"NOT_ALLOWED\");\n        generator[generatorToSet] = add;\n        emit GeneratorSet(generatorToSet, add);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}